use wasm_bindgen::prelude::*;
extern crate wasm_bindgen;
use lazy_static::lazy_static;
use regex::Regex;

// Import the bangs map generated by build.rs
include!(concat!(env!("OUT_DIR"), "/codegen.rs"));

/**
 * Get the target URL from a bang
 * @param keyword The bang
 * @return The target URL
 */
fn get_newloc(keyword: &str, search: &str) -> Option<String> {
    let bang = BANGS.get(keyword).cloned()?;
    let newloc = bang.replace("{{{s}}}", search);
    Some(newloc)
}

/**
 * Get the target URL from a search query
 * @param text The query
 * @return The target URL to redirect user to
 */
#[wasm_bindgen]
pub fn process_query(text: &str) -> Option<String> {
    lazy_static! {
        static ref HASBANG: Regex = Regex::new(r"\B!.+?\b").unwrap();
    }
    // check if the query has a bang and store first match
    if let Some(bang) = HASBANG.find(text) {
        let bang = bang.as_str();
        let searchstr = text.replace(bang, "");
        if let Some(newloc) = get_newloc(&bang[1..], searchstr.trim()) {
            return Some(newloc);
        }
    }
    return None;
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn replace_g() {
        assert_eq!(get_newloc("g", "test").unwrap(), "https://www.google.com/search?q=test");
    }

    #[test]
    fn test_process_query() {
        assert_eq!(process_query("!g test").unwrap(), "https://www.google.com/search?q=test");
    }
}
